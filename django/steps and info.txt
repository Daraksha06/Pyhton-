Create VENV : 
py -m venv <envname>
envname/scripts/activate

Install django : 
pip install django

create project : 
py -m django startproject <project_name> .

create app : 
py manage.py startapp <appname>

register app in setting.py file : 
installed_app  :[
    '<appname>'
]

run djangoproject : 
py manage.py runserver


to scan db changes : 
py manage.py makemigrations

to apply db changes : 
py manage.py migrate

crate admin login : 
py manage.py createsuperuser

admin username : admin
mail: admin@gmail.com
password : daraksha

in myproject -> urls.py -> add path for when the page load our app1 should run 
from django.urls import path,include
eg  path('',include("myapp1.urls"))

copy urls.py from myproject to myapp1

in myapp1 -> urls.py
from myapp1.views import * 
path("",index,name="index")

----------------------------------------------
make one folder named static 
myproject--> settings.py , add this  
STATIC_URL = 'static/'
STATICFILES_DIRS  = [
    BASE_DIR/"static"
] 

---------------------------------------------------

---static resource--- [css, js, image] 
STATIC_URL = '/static'
STATICFILES_DIRS = [
        <STATIC FOLDER PATH>
]

---dynamic resource---
MEDIA_URL = '/MEDIA'
MEDIA_ROOT = <MEDIA FOLDER PATH>

-----USE STATIC RESOUCE IN HTML----
{%laod static%} - in html file


--------base.html-------
commoncode----
-------------

{%block content%}{%endbloack%}
--------------
---------------
--------------

use base .html in html other files:
{%extends 'base.html'%}


*******************MODAL*****************
create modle models.py of myapp: 
ex : 
class Student(models.model):
        fieldname : datatypes

register modle in admin.py of myapp : 
---import modle in admin file
admin.site.register(Model name)
 
then do migration commands
*******************Shell***************
py manage.py shell

ORM : ORM stands for Object-Relational Mapping.

It allows you to interact with your database using Python code, instead of writing raw SQL queries.

In Django, every model (like Student) maps to a database table, and each object/record is an instance of that model.

insert data : Ref [Studnet(name,email,age)] 

st = Student(name="",email="",age=)
st.save()

Student.object.create(name="",email="",age=)

viewData : 
Student.objects.all()
Student.objects.get(id or pk = 1)

deletedata : 

st  =Student.objects.get(id or pk = 1)
st.delete()

update : 
st = Student.objects.get(id or pk = 1)
st.name = ""
st.email=""
st.age = 
st.save()